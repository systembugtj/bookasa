#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crimson.Catalog.Services
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class DublinCoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPeriodOfTime(PeriodOfTime instance);
    partial void UpdatePeriodOfTime(PeriodOfTime instance);
    partial void DeletePeriodOfTime(PeriodOfTime instance);
    partial void InsertResourceDate(ResourceDate instance);
    partial void UpdateResourceDate(ResourceDate instance);
    partial void DeleteResourceDate(ResourceDate instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    #endregion
		
		public DublinCoreDataContext() : 
				base(global::Crimson.Catalog.Services.Properties.Settings.Default.DataSourceConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DublinCoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DublinCoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DublinCoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DublinCoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PeriodOfTime> PeriodOfTimes
		{
			get
			{
				return this.GetTable<PeriodOfTime>();
			}
		}
		
		public System.Data.Linq.Table<ResourceDate> ResourceDates
		{
			get
			{
				return this.GetTable<ResourceDate>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
	}
	
	[Table(Name="DublinCore.PeriodOfTime")]
	public partial class PeriodOfTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PeriodOfTimeId;
		
		private string _Name;
		
		private string _Start;
		
		private string _End;
		
		private string _Scheme;
		
		private EntitySet<ResourceDate> _ResourceDates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodOfTimeIdChanging(System.Guid value);
    partial void OnPeriodOfTimeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartChanging(string value);
    partial void OnStartChanged();
    partial void OnEndChanging(string value);
    partial void OnEndChanged();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    #endregion
		
		public PeriodOfTime()
		{
			this._ResourceDates = new EntitySet<ResourceDate>(new Action<ResourceDate>(this.attach_ResourceDates), new Action<ResourceDate>(this.detach_ResourceDates));
			OnCreated();
		}
		
		[Column(Storage="_PeriodOfTimeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PeriodOfTimeId
		{
			get
			{
				return this._PeriodOfTimeId;
			}
			set
			{
				if ((this._PeriodOfTimeId != value))
				{
					this.OnPeriodOfTimeIdChanging(value);
					this.SendPropertyChanging();
					this._PeriodOfTimeId = value;
					this.SendPropertyChanged("PeriodOfTimeId");
					this.OnPeriodOfTimeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Name="[End]", Storage="_End", DbType="NVarChar(50)")]
		public string End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[Column(Storage="_Scheme", DbType="NVarChar(50)")]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		[Association(Name="PeriodOfTime_ResourceDate", Storage="_ResourceDates", ThisKey="PeriodOfTimeId", OtherKey="ResourceId")]
		public EntitySet<ResourceDate> ResourceDates
		{
			get
			{
				return this._ResourceDates;
			}
			set
			{
				this._ResourceDates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceDates(ResourceDate entity)
		{
			this.SendPropertyChanging();
			entity.PeriodOfTime = this;
		}
		
		private void detach_ResourceDates(ResourceDate entity)
		{
			this.SendPropertyChanging();
			entity.PeriodOfTime = null;
		}
	}
	
	[Table(Name="DublinCore.ResourceDate")]
	public partial class ResourceDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _PeriodOfTimeId;
		
		private EntityRef<PeriodOfTime> _PeriodOfTime;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnPeriodOfTimeIdChanging(System.Guid value);
    partial void OnPeriodOfTimeIdChanged();
    #endregion
		
		public ResourceDate()
		{
			this._PeriodOfTime = default(EntityRef<PeriodOfTime>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[Column(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._PeriodOfTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodOfTimeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PeriodOfTimeId
		{
			get
			{
				return this._PeriodOfTimeId;
			}
			set
			{
				if ((this._PeriodOfTimeId != value))
				{
					this.OnPeriodOfTimeIdChanging(value);
					this.SendPropertyChanging();
					this._PeriodOfTimeId = value;
					this.SendPropertyChanged("PeriodOfTimeId");
					this.OnPeriodOfTimeIdChanged();
				}
			}
		}
		
		[Association(Name="PeriodOfTime_ResourceDate", Storage="_PeriodOfTime", ThisKey="ResourceId", OtherKey="PeriodOfTimeId", IsForeignKey=true)]
		public PeriodOfTime PeriodOfTime
		{
			get
			{
				return this._PeriodOfTime.Entity;
			}
			set
			{
				PeriodOfTime previousValue = this._PeriodOfTime.Entity;
				if (((previousValue != value) 
							|| (this._PeriodOfTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PeriodOfTime.Entity = null;
						previousValue.ResourceDates.Remove(this);
					}
					this._PeriodOfTime.Entity = value;
					if ((value != null))
					{
						value.ResourceDates.Add(this);
						this._ResourceId = value.PeriodOfTimeId;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("PeriodOfTime");
				}
			}
		}
		
		[Association(Name="Resource_ResourceDate", Storage="_Resource", ThisKey="ResourceId", OtherKey="ResourceId", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceDates.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceDates.Add(this);
						this._ResourceId = value.ResourceId;
					}
					else
					{
						this._ResourceId = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private string _Abstract;
		
		private string _Alternative;
		
		private System.Nullable<System.Guid> _Available;
		
		private string _Description;
		
		private EntitySet<ResourceDate> _ResourceDates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnAlternativeChanging(string value);
    partial void OnAlternativeChanged();
    partial void OnAvailableChanging(System.Nullable<System.Guid> value);
    partial void OnAvailableChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Resource()
		{
			this._ResourceDates = new EntitySet<ResourceDate>(new Action<ResourceDate>(this.attach_ResourceDates), new Action<ResourceDate>(this.detach_ResourceDates));
			OnCreated();
		}
		
		[Column(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Abstract", DbType="NVarChar(512)")]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[Column(Storage="_Alternative", DbType="NVarChar(256)")]
		public string Alternative
		{
			get
			{
				return this._Alternative;
			}
			set
			{
				if ((this._Alternative != value))
				{
					this.OnAlternativeChanging(value);
					this.SendPropertyChanging();
					this._Alternative = value;
					this.SendPropertyChanged("Alternative");
					this.OnAlternativeChanged();
				}
			}
		}
		
		[Column(Storage="_Available", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Resource_ResourceDate", Storage="_ResourceDates", ThisKey="ResourceId", OtherKey="ResourceId")]
		public EntitySet<ResourceDate> ResourceDates
		{
			get
			{
				return this._ResourceDates;
			}
			set
			{
				this._ResourceDates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ResourceDates(ResourceDate entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceDates(ResourceDate entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
}
#pragma warning restore 1591
