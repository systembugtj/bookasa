#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crimson.Catalog
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class DataRepository : Crimson.Catalog.DublinCoreBase
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgent(Agent instance);
    partial void UpdateAgent(Agent instance);
    partial void DeleteAgent(Agent instance);
    partial void InsertStandard(Standard instance);
    partial void UpdateStandard(Standard instance);
    partial void DeleteStandard(Standard instance);
    partial void InsertAgentClass(AgentClass instance);
    partial void UpdateAgentClass(AgentClass instance);
    partial void DeleteAgentClass(AgentClass instance);
    partial void InsertBibliographicResource(BibliographicResource instance);
    partial void UpdateBibliographicResource(BibliographicResource instance);
    partial void DeleteBibliographicResource(BibliographicResource instance);
    partial void InsertCollection(Collection instance);
    partial void UpdateCollection(Collection instance);
    partial void DeleteCollection(Collection instance);
    partial void InsertFileFormat(FileFormat instance);
    partial void UpdateFileFormat(FileFormat instance);
    partial void DeleteFileFormat(FileFormat instance);
    partial void InsertFrequency(Frequency instance);
    partial void UpdateFrequency(Frequency instance);
    partial void DeleteFrequency(Frequency instance);
    partial void InsertJurisdiction(Jurisdiction instance);
    partial void UpdateJurisdiction(Jurisdiction instance);
    partial void DeleteJurisdiction(Jurisdiction instance);
    partial void InsertLicenseDocument(LicenseDocument instance);
    partial void UpdateLicenseDocument(LicenseDocument instance);
    partial void DeleteLicenseDocument(LicenseDocument instance);
    partial void InsertLinguisticSystem(LinguisticSystem instance);
    partial void UpdateLinguisticSystem(LinguisticSystem instance);
    partial void DeleteLinguisticSystem(LinguisticSystem instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocationPeriodOrJurisdictioncation(LocationPeriodOrJurisdictioncation instance);
    partial void UpdateLocationPeriodOrJurisdictioncation(LocationPeriodOrJurisdictioncation instance);
    partial void DeleteLocationPeriodOrJurisdictioncation(LocationPeriodOrJurisdictioncation instance);
    partial void InsertMARCRelator(MARCRelator instance);
    partial void UpdateMARCRelator(MARCRelator instance);
    partial void DeleteMARCRelator(MARCRelator instance);
    partial void InsertMediaType(MediaType instance);
    partial void UpdateMediaType(MediaType instance);
    partial void DeleteMediaType(MediaType instance);
    partial void InsertMediaTypeOrExtent(MediaTypeOrExtent instance);
    partial void UpdateMediaTypeOrExtent(MediaTypeOrExtent instance);
    partial void DeleteMediaTypeOrExtent(MediaTypeOrExtent instance);
    partial void InsertMethodOfAccrual(MethodOfAccrual instance);
    partial void UpdateMethodOfAccrual(MethodOfAccrual instance);
    partial void DeleteMethodOfAccrual(MethodOfAccrual instance);
    partial void InsertMethodOfInstruction(MethodOfInstruction instance);
    partial void UpdateMethodOfInstruction(MethodOfInstruction instance);
    partial void DeleteMethodOfInstruction(MethodOfInstruction instance);
    partial void InsertPeriodOfTime(PeriodOfTime instance);
    partial void UpdatePeriodOfTime(PeriodOfTime instance);
    partial void DeletePeriodOfTime(PeriodOfTime instance);
    partial void InsertPhysicalMedium(PhysicalMedium instance);
    partial void UpdatePhysicalMedium(PhysicalMedium instance);
    partial void DeletePhysicalMedium(PhysicalMedium instance);
    partial void InsertPhysicalResource(PhysicalResource instance);
    partial void UpdatePhysicalResource(PhysicalResource instance);
    partial void DeletePhysicalResource(PhysicalResource instance);
    partial void InsertPolicy(Policy instance);
    partial void UpdatePolicy(Policy instance);
    partial void DeletePolicy(Policy instance);
    partial void InsertProvenanceStatement(ProvenanceStatement instance);
    partial void UpdateProvenanceStatement(ProvenanceStatement instance);
    partial void DeleteProvenanceStatement(ProvenanceStatement instance);
    partial void InsertRelation(Relation instance);
    partial void UpdateRelation(Relation instance);
    partial void DeleteRelation(Relation instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceAgent(ResourceAgent instance);
    partial void UpdateResourceAgent(ResourceAgent instance);
    partial void DeleteResourceAgent(ResourceAgent instance);
    partial void InsertRightsStatement(RightsStatement instance);
    partial void UpdateRightsStatement(RightsStatement instance);
    partial void DeleteRightsStatement(RightsStatement instance);
    partial void InsertSizeOrDuration(SizeOrDuration instance);
    partial void UpdateSizeOrDuration(SizeOrDuration instance);
    partial void DeleteSizeOrDuration(SizeOrDuration instance);
    #endregion
		
		public DataRepository() : 
				base(global::Crimson.Catalog.Properties.Settings.Default.DataSourceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataRepository(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataRepository(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataRepository(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataRepository(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agent> Agents
		{
			get
			{
				return this.GetTable<Agent>();
			}
		}
		
		public System.Data.Linq.Table<Standard> Standards
		{
			get
			{
				return this.GetTable<Standard>();
			}
		}
		
		public System.Data.Linq.Table<AgentClass> AgentClasses
		{
			get
			{
				return this.GetTable<AgentClass>();
			}
		}
		
		public System.Data.Linq.Table<BibliographicResource> BibliographicResources
		{
			get
			{
				return this.GetTable<BibliographicResource>();
			}
		}
		
		public System.Data.Linq.Table<Collection> Collections
		{
			get
			{
				return this.GetTable<Collection>();
			}
		}
		
		public System.Data.Linq.Table<FileFormat> FileFormats
		{
			get
			{
				return this.GetTable<FileFormat>();
			}
		}
		
		public System.Data.Linq.Table<Frequency> Frequencies
		{
			get
			{
				return this.GetTable<Frequency>();
			}
		}
		
		public System.Data.Linq.Table<Jurisdiction> Jurisdictions
		{
			get
			{
				return this.GetTable<Jurisdiction>();
			}
		}
		
		public System.Data.Linq.Table<LicenseDocument> LicenseDocuments
		{
			get
			{
				return this.GetTable<LicenseDocument>();
			}
		}
		
		public System.Data.Linq.Table<LinguisticSystem> LinguisticSystems
		{
			get
			{
				return this.GetTable<LinguisticSystem>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<LocationPeriodOrJurisdictioncation> LocationPeriodOrJurisdictioncations
		{
			get
			{
				return this.GetTable<LocationPeriodOrJurisdictioncation>();
			}
		}
		
		public System.Data.Linq.Table<MARCRelator> MARCRelators
		{
			get
			{
				return this.GetTable<MARCRelator>();
			}
		}
		
		public System.Data.Linq.Table<MediaType> MediaTypes
		{
			get
			{
				return this.GetTable<MediaType>();
			}
		}
		
		public System.Data.Linq.Table<MediaTypeOrExtent> MediaTypeOrExtents
		{
			get
			{
				return this.GetTable<MediaTypeOrExtent>();
			}
		}
		
		public System.Data.Linq.Table<MethodOfAccrual> MethodOfAccruals
		{
			get
			{
				return this.GetTable<MethodOfAccrual>();
			}
		}
		
		public System.Data.Linq.Table<MethodOfInstruction> MethodOfInstructions
		{
			get
			{
				return this.GetTable<MethodOfInstruction>();
			}
		}
		
		public System.Data.Linq.Table<PeriodOfTime> PeriodOfTimes
		{
			get
			{
				return this.GetTable<PeriodOfTime>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalMedium> PhysicalMediums
		{
			get
			{
				return this.GetTable<PhysicalMedium>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalResource> PhysicalResources
		{
			get
			{
				return this.GetTable<PhysicalResource>();
			}
		}
		
		public System.Data.Linq.Table<Policy> Policies
		{
			get
			{
				return this.GetTable<Policy>();
			}
		}
		
		public System.Data.Linq.Table<ProvenanceStatement> ProvenanceStatements
		{
			get
			{
				return this.GetTable<ProvenanceStatement>();
			}
		}
		
		public System.Data.Linq.Table<Relation> Relations
		{
			get
			{
				return this.GetTable<Relation>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceAgent> ResourceAgents
		{
			get
			{
				return this.GetTable<ResourceAgent>();
			}
		}
		
		public System.Data.Linq.Table<RightsStatement> RightsStatements
		{
			get
			{
				return this.GetTable<RightsStatement>();
			}
		}
		
		public System.Data.Linq.Table<SizeOrDuration> SizeOrDurations
		{
			get
			{
				return this.GetTable<SizeOrDuration>();
			}
		}
	}
	
	[Table(Name="DublinCore.Agent")]
	public partial class Agent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgentId;
		
		private string _Name;
		
		private string _FileAs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgentIdChanging(System.Guid value);
    partial void OnAgentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    #endregion
		
		public Agent()
		{
			OnCreated();
		}
		
		[Column(Storage="_AgentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentId
		{
			get
			{
				return this._AgentId;
			}
			set
			{
				if ((this._AgentId != value))
				{
					this.OnAgentIdChanging(value);
					this.SendPropertyChanging();
					this._AgentId = value;
					this.SendPropertyChanged("AgentId");
					this.OnAgentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Standard")]
	public partial class Standard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StandardId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStandardIdChanging(System.Guid value);
    partial void OnStandardIdChanged();
    #endregion
		
		public Standard()
		{
			OnCreated();
		}
		
		[Column(Storage="_StandardId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StandardId
		{
			get
			{
				return this._StandardId;
			}
			set
			{
				if ((this._StandardId != value))
				{
					this.OnStandardIdChanging(value);
					this.SendPropertyChanging();
					this._StandardId = value;
					this.SendPropertyChanged("StandardId");
					this.OnStandardIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.AgentClass")]
	public partial class AgentClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AgentClassId;
		
		private string _MARCRelator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgentClassIdChanging(System.Guid value);
    partial void OnAgentClassIdChanged();
    partial void OnMARCRelatorChanging(string value);
    partial void OnMARCRelatorChanged();
    #endregion
		
		public AgentClass()
		{
			OnCreated();
		}
		
		[Column(Storage="_AgentClassId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentClassId
		{
			get
			{
				return this._AgentClassId;
			}
			set
			{
				if ((this._AgentClassId != value))
				{
					this.OnAgentClassIdChanging(value);
					this.SendPropertyChanging();
					this._AgentClassId = value;
					this.SendPropertyChanged("AgentClassId");
					this.OnAgentClassIdChanged();
				}
			}
		}
		
		[Column(Storage="_MARCRelator", DbType="NChar(3)")]
		public string MARCRelator
		{
			get
			{
				return this._MARCRelator;
			}
			set
			{
				if ((this._MARCRelator != value))
				{
					this.OnMARCRelatorChanging(value);
					this.SendPropertyChanging();
					this._MARCRelator = value;
					this.SendPropertyChanged("MARCRelator");
					this.OnMARCRelatorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.BibliographicResource")]
	public partial class BibliographicResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BibliographicResourceId;
		
		private string _BibliographicCitation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBibliographicResourceIdChanging(System.Guid value);
    partial void OnBibliographicResourceIdChanged();
    partial void OnBibliographicCitationChanging(string value);
    partial void OnBibliographicCitationChanged();
    #endregion
		
		public BibliographicResource()
		{
			OnCreated();
		}
		
		[Column(Storage="_BibliographicResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BibliographicResourceId
		{
			get
			{
				return this._BibliographicResourceId;
			}
			set
			{
				if ((this._BibliographicResourceId != value))
				{
					this.OnBibliographicResourceIdChanging(value);
					this.SendPropertyChanging();
					this._BibliographicResourceId = value;
					this.SendPropertyChanged("BibliographicResourceId");
					this.OnBibliographicResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_BibliographicCitation", DbType="NVarChar(255)")]
		public string BibliographicCitation
		{
			get
			{
				return this._BibliographicCitation;
			}
			set
			{
				if ((this._BibliographicCitation != value))
				{
					this.OnBibliographicCitationChanging(value);
					this.SendPropertyChanging();
					this._BibliographicCitation = value;
					this.SendPropertyChanged("BibliographicCitation");
					this.OnBibliographicCitationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Collection")]
	public partial class Collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CollectionId;
		
		private string _AccrualMethod;
		
		private string _AccrualPeriodicity;
		
		private string _accrualPolicy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCollectionIdChanging(System.Guid value);
    partial void OnCollectionIdChanged();
    partial void OnAccrualMethodChanging(string value);
    partial void OnAccrualMethodChanged();
    partial void OnAccrualPeriodicityChanging(string value);
    partial void OnAccrualPeriodicityChanged();
    partial void OnaccrualPolicyChanging(string value);
    partial void OnaccrualPolicyChanged();
    #endregion
		
		public Collection()
		{
			OnCreated();
		}
		
		[Column(Storage="_CollectionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CollectionId
		{
			get
			{
				return this._CollectionId;
			}
			set
			{
				if ((this._CollectionId != value))
				{
					this.OnCollectionIdChanging(value);
					this.SendPropertyChanging();
					this._CollectionId = value;
					this.SendPropertyChanged("CollectionId");
					this.OnCollectionIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccrualMethod", DbType="NVarChar(50)")]
		public string AccrualMethod
		{
			get
			{
				return this._AccrualMethod;
			}
			set
			{
				if ((this._AccrualMethod != value))
				{
					this.OnAccrualMethodChanging(value);
					this.SendPropertyChanging();
					this._AccrualMethod = value;
					this.SendPropertyChanged("AccrualMethod");
					this.OnAccrualMethodChanged();
				}
			}
		}
		
		[Column(Storage="_AccrualPeriodicity", DbType="NVarChar(50)")]
		public string AccrualPeriodicity
		{
			get
			{
				return this._AccrualPeriodicity;
			}
			set
			{
				if ((this._AccrualPeriodicity != value))
				{
					this.OnAccrualPeriodicityChanging(value);
					this.SendPropertyChanging();
					this._AccrualPeriodicity = value;
					this.SendPropertyChanged("AccrualPeriodicity");
					this.OnAccrualPeriodicityChanged();
				}
			}
		}
		
		[Column(Storage="_accrualPolicy", DbType="NVarChar(50)")]
		public string accrualPolicy
		{
			get
			{
				return this._accrualPolicy;
			}
			set
			{
				if ((this._accrualPolicy != value))
				{
					this.OnaccrualPolicyChanging(value);
					this.SendPropertyChanging();
					this._accrualPolicy = value;
					this.SendPropertyChanged("accrualPolicy");
					this.OnaccrualPolicyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.FileFormat")]
	public partial class FileFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FileFormatId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileFormatIdChanging(System.Guid value);
    partial void OnFileFormatIdChanged();
    #endregion
		
		public FileFormat()
		{
			OnCreated();
		}
		
		[Column(Storage="_FileFormatId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FileFormatId
		{
			get
			{
				return this._FileFormatId;
			}
			set
			{
				if ((this._FileFormatId != value))
				{
					this.OnFileFormatIdChanging(value);
					this.SendPropertyChanging();
					this._FileFormatId = value;
					this.SendPropertyChanged("FileFormatId");
					this.OnFileFormatIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Frequency")]
	public partial class Frequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FrequencyId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFrequencyIdChanging(System.Guid value);
    partial void OnFrequencyIdChanged();
    #endregion
		
		public Frequency()
		{
			OnCreated();
		}
		
		[Column(Storage="_FrequencyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FrequencyId
		{
			get
			{
				return this._FrequencyId;
			}
			set
			{
				if ((this._FrequencyId != value))
				{
					this.OnFrequencyIdChanging(value);
					this.SendPropertyChanging();
					this._FrequencyId = value;
					this.SendPropertyChanged("FrequencyId");
					this.OnFrequencyIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Jurisdiction")]
	public partial class Jurisdiction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JurisdictionId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJurisdictionIdChanging(System.Guid value);
    partial void OnJurisdictionIdChanged();
    #endregion
		
		public Jurisdiction()
		{
			OnCreated();
		}
		
		[Column(Storage="_JurisdictionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JurisdictionId
		{
			get
			{
				return this._JurisdictionId;
			}
			set
			{
				if ((this._JurisdictionId != value))
				{
					this.OnJurisdictionIdChanging(value);
					this.SendPropertyChanging();
					this._JurisdictionId = value;
					this.SendPropertyChanged("JurisdictionId");
					this.OnJurisdictionIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.LicenseDocument")]
	public partial class LicenseDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LicenseDocumentId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseDocumentIdChanging(System.Guid value);
    partial void OnLicenseDocumentIdChanged();
    #endregion
		
		public LicenseDocument()
		{
			OnCreated();
		}
		
		[Column(Storage="_LicenseDocumentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LicenseDocumentId
		{
			get
			{
				return this._LicenseDocumentId;
			}
			set
			{
				if ((this._LicenseDocumentId != value))
				{
					this.OnLicenseDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._LicenseDocumentId = value;
					this.SendPropertyChanged("LicenseDocumentId");
					this.OnLicenseDocumentIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.LinguisticSystem")]
	public partial class LinguisticSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LinguisticSystemId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinguisticSystemIdChanging(System.Guid value);
    partial void OnLinguisticSystemIdChanged();
    #endregion
		
		public LinguisticSystem()
		{
			OnCreated();
		}
		
		[Column(Storage="_LinguisticSystemId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LinguisticSystemId
		{
			get
			{
				return this._LinguisticSystemId;
			}
			set
			{
				if ((this._LinguisticSystemId != value))
				{
					this.OnLinguisticSystemIdChanging(value);
					this.SendPropertyChanging();
					this._LinguisticSystemId = value;
					this.SendPropertyChanged("LinguisticSystemId");
					this.OnLinguisticSystemIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(System.Guid value);
    partial void OnLocationIdChanged();
    #endregion
		
		public Location()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.LocationPeriodOrJurisdictioncation")]
	public partial class LocationPeriodOrJurisdictioncation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationPeriodOrJurisdictioncationId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationPeriodOrJurisdictioncationIdChanging(System.Guid value);
    partial void OnLocationPeriodOrJurisdictioncationIdChanged();
    #endregion
		
		public LocationPeriodOrJurisdictioncation()
		{
			OnCreated();
		}
		
		[Column(Storage="_LocationPeriodOrJurisdictioncationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationPeriodOrJurisdictioncationId
		{
			get
			{
				return this._LocationPeriodOrJurisdictioncationId;
			}
			set
			{
				if ((this._LocationPeriodOrJurisdictioncationId != value))
				{
					this.OnLocationPeriodOrJurisdictioncationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationPeriodOrJurisdictioncationId = value;
					this.SendPropertyChanged("LocationPeriodOrJurisdictioncationId");
					this.OnLocationPeriodOrJurisdictioncationIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.MARCRelator")]
	public partial class MARCRelator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MARCRealtorId;
		
		private string _Title;
		
		private string _DESCRIPTION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMARCRealtorIdChanging(string value);
    partial void OnMARCRealtorIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    #endregion
		
		public MARCRelator()
		{
			OnCreated();
		}
		
		[Column(Storage="_MARCRealtorId", DbType="NVarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MARCRealtorId
		{
			get
			{
				return this._MARCRealtorId;
			}
			set
			{
				if ((this._MARCRealtorId != value))
				{
					this.OnMARCRealtorIdChanging(value);
					this.SendPropertyChanging();
					this._MARCRealtorId = value;
					this.SendPropertyChanged("MARCRealtorId");
					this.OnMARCRealtorIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_DESCRIPTION", DbType="NVarChar(512)")]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.MediaType")]
	public partial class MediaType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MediaTypeId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeIdChanging(System.Guid value);
    partial void OnMediaTypeIdChanged();
    #endregion
		
		public MediaType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MediaTypeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaTypeId
		{
			get
			{
				return this._MediaTypeId;
			}
			set
			{
				if ((this._MediaTypeId != value))
				{
					this.OnMediaTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeId = value;
					this.SendPropertyChanged("MediaTypeId");
					this.OnMediaTypeIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.MediaTypeOrExtent")]
	public partial class MediaTypeOrExtent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MediaTypeOrExtentId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMediaTypeOrExtentIdChanging(System.Guid value);
    partial void OnMediaTypeOrExtentIdChanged();
    #endregion
		
		public MediaTypeOrExtent()
		{
			OnCreated();
		}
		
		[Column(Storage="_MediaTypeOrExtentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MediaTypeOrExtentId
		{
			get
			{
				return this._MediaTypeOrExtentId;
			}
			set
			{
				if ((this._MediaTypeOrExtentId != value))
				{
					this.OnMediaTypeOrExtentIdChanging(value);
					this.SendPropertyChanging();
					this._MediaTypeOrExtentId = value;
					this.SendPropertyChanged("MediaTypeOrExtentId");
					this.OnMediaTypeOrExtentIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.MethodOfAccrual")]
	public partial class MethodOfAccrual : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MethodOfAccrualId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodOfAccrualIdChanging(System.Guid value);
    partial void OnMethodOfAccrualIdChanged();
    #endregion
		
		public MethodOfAccrual()
		{
			OnCreated();
		}
		
		[Column(Storage="_MethodOfAccrualId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MethodOfAccrualId
		{
			get
			{
				return this._MethodOfAccrualId;
			}
			set
			{
				if ((this._MethodOfAccrualId != value))
				{
					this.OnMethodOfAccrualIdChanging(value);
					this.SendPropertyChanging();
					this._MethodOfAccrualId = value;
					this.SendPropertyChanged("MethodOfAccrualId");
					this.OnMethodOfAccrualIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.MethodOfInstruction")]
	public partial class MethodOfInstruction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MethodOfInstructionId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodOfInstructionIdChanging(System.Guid value);
    partial void OnMethodOfInstructionIdChanged();
    #endregion
		
		public MethodOfInstruction()
		{
			OnCreated();
		}
		
		[Column(Storage="_MethodOfInstructionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MethodOfInstructionId
		{
			get
			{
				return this._MethodOfInstructionId;
			}
			set
			{
				if ((this._MethodOfInstructionId != value))
				{
					this.OnMethodOfInstructionIdChanging(value);
					this.SendPropertyChanging();
					this._MethodOfInstructionId = value;
					this.SendPropertyChanged("MethodOfInstructionId");
					this.OnMethodOfInstructionIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.PeriodOfTime")]
	public partial class PeriodOfTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PeriodOfTimeId;
		
		private string _Name;
		
		private string _Start;
		
		private string _End;
		
		private string _Scheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodOfTimeIdChanging(System.Guid value);
    partial void OnPeriodOfTimeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartChanging(string value);
    partial void OnStartChanged();
    partial void OnEndChanging(string value);
    partial void OnEndChanged();
    partial void OnSchemeChanging(string value);
    partial void OnSchemeChanged();
    #endregion
		
		public PeriodOfTime()
		{
			OnCreated();
		}
		
		[Column(Storage="_PeriodOfTimeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PeriodOfTimeId
		{
			get
			{
				return this._PeriodOfTimeId;
			}
			set
			{
				if ((this._PeriodOfTimeId != value))
				{
					this.OnPeriodOfTimeIdChanging(value);
					this.SendPropertyChanging();
					this._PeriodOfTimeId = value;
					this.SendPropertyChanged("PeriodOfTimeId");
					this.OnPeriodOfTimeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Name="[End]", Storage="_End", DbType="NVarChar(50)")]
		public string End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[Column(Storage="_Scheme", DbType="NVarChar(50)")]
		public string Scheme
		{
			get
			{
				return this._Scheme;
			}
			set
			{
				if ((this._Scheme != value))
				{
					this.OnSchemeChanging(value);
					this.SendPropertyChanging();
					this._Scheme = value;
					this.SendPropertyChanged("Scheme");
					this.OnSchemeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.PhysicalMedium")]
	public partial class PhysicalMedium : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhysicalMediumId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicalMediumIdChanging(System.Guid value);
    partial void OnPhysicalMediumIdChanged();
    #endregion
		
		public PhysicalMedium()
		{
			OnCreated();
		}
		
		[Column(Storage="_PhysicalMediumId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhysicalMediumId
		{
			get
			{
				return this._PhysicalMediumId;
			}
			set
			{
				if ((this._PhysicalMediumId != value))
				{
					this.OnPhysicalMediumIdChanging(value);
					this.SendPropertyChanging();
					this._PhysicalMediumId = value;
					this.SendPropertyChanged("PhysicalMediumId");
					this.OnPhysicalMediumIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.PhysicalResource")]
	public partial class PhysicalResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhysicalResourceId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicalResourceIdChanging(System.Guid value);
    partial void OnPhysicalResourceIdChanged();
    #endregion
		
		public PhysicalResource()
		{
			OnCreated();
		}
		
		[Column(Storage="_PhysicalResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PhysicalResourceId
		{
			get
			{
				return this._PhysicalResourceId;
			}
			set
			{
				if ((this._PhysicalResourceId != value))
				{
					this.OnPhysicalResourceIdChanging(value);
					this.SendPropertyChanging();
					this._PhysicalResourceId = value;
					this.SendPropertyChanged("PhysicalResourceId");
					this.OnPhysicalResourceIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Policy")]
	public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PolicyId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPolicyIdChanging(System.Guid value);
    partial void OnPolicyIdChanged();
    #endregion
		
		public Policy()
		{
			OnCreated();
		}
		
		[Column(Storage="_PolicyId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PolicyId
		{
			get
			{
				return this._PolicyId;
			}
			set
			{
				if ((this._PolicyId != value))
				{
					this.OnPolicyIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyId = value;
					this.SendPropertyChanged("PolicyId");
					this.OnPolicyIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.ProvenanceStatement")]
	public partial class ProvenanceStatement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProvenanceStatementId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvenanceStatementIdChanging(System.Guid value);
    partial void OnProvenanceStatementIdChanged();
    #endregion
		
		public ProvenanceStatement()
		{
			OnCreated();
		}
		
		[Column(Storage="_ProvenanceStatementId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProvenanceStatementId
		{
			get
			{
				return this._ProvenanceStatementId;
			}
			set
			{
				if ((this._ProvenanceStatementId != value))
				{
					this.OnProvenanceStatementIdChanging(value);
					this.SendPropertyChanging();
					this._ProvenanceStatementId = value;
					this.SendPropertyChanged("ProvenanceStatementId");
					this.OnProvenanceStatementIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Relation")]
	public partial class Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RelationId;
		
		private System.Nullable<System.Guid> _ConformsTo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIdChanging(System.Guid value);
    partial void OnRelationIdChanged();
    partial void OnConformsToChanging(System.Nullable<System.Guid> value);
    partial void OnConformsToChanged();
    #endregion
		
		public Relation()
		{
			OnCreated();
		}
		
		[Column(Storage="_RelationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RelationId
		{
			get
			{
				return this._RelationId;
			}
			set
			{
				if ((this._RelationId != value))
				{
					this.OnRelationIdChanging(value);
					this.SendPropertyChanging();
					this._RelationId = value;
					this.SendPropertyChanged("RelationId");
					this.OnRelationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ConformsTo", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ConformsTo
		{
			get
			{
				return this._ConformsTo;
			}
			set
			{
				if ((this._ConformsTo != value))
				{
					this.OnConformsToChanging(value);
					this.SendPropertyChanging();
					this._ConformsTo = value;
					this.SendPropertyChanged("ConformsTo");
					this.OnConformsToChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private string _FileAs;
		
		private string _Abstract;
		
		private string _Alternative;
		
		private string _Audience;
		
		private System.Nullable<System.Guid> _Available;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnFileAsChanging(string value);
    partial void OnFileAsChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnAlternativeChanging(string value);
    partial void OnAlternativeChanged();
    partial void OnAudienceChanging(string value);
    partial void OnAudienceChanged();
    partial void OnAvailableChanging(System.Nullable<System.Guid> value);
    partial void OnAvailableChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Resource()
		{
			OnCreated();
		}
		
		[Column(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileAs", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string FileAs
		{
			get
			{
				return this._FileAs;
			}
			set
			{
				if ((this._FileAs != value))
				{
					this.OnFileAsChanging(value);
					this.SendPropertyChanging();
					this._FileAs = value;
					this.SendPropertyChanged("FileAs");
					this.OnFileAsChanged();
				}
			}
		}
		
		[Column(Storage="_Abstract", DbType="NVarChar(512)")]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[Column(Storage="_Alternative", DbType="NVarChar(128)")]
		public string Alternative
		{
			get
			{
				return this._Alternative;
			}
			set
			{
				if ((this._Alternative != value))
				{
					this.OnAlternativeChanging(value);
					this.SendPropertyChanging();
					this._Alternative = value;
					this.SendPropertyChanged("Alternative");
					this.OnAlternativeChanged();
				}
			}
		}
		
		[Column(Storage="_Audience", DbType="NVarChar(80)")]
		public string Audience
		{
			get
			{
				return this._Audience;
			}
			set
			{
				if ((this._Audience != value))
				{
					this.OnAudienceChanging(value);
					this.SendPropertyChanging();
					this._Audience = value;
					this.SendPropertyChanged("Audience");
					this.OnAudienceChanged();
				}
			}
		}
		
		[Column(Storage="_Available", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.ResourceAgent")]
	public partial class ResourceAgent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ResourceId;
		
		private System.Guid _AgentId;
		
		private string _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(System.Guid value);
    partial void OnResourceIdChanged();
    partial void OnAgentIdChanging(System.Guid value);
    partial void OnAgentIdChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public ResourceAgent()
		{
			OnCreated();
		}
		
		[Column(Storage="_ResourceId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[Column(Storage="_AgentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AgentId
		{
			get
			{
				return this._AgentId;
			}
			set
			{
				if ((this._AgentId != value))
				{
					this.OnAgentIdChanging(value);
					this.SendPropertyChanging();
					this._AgentId = value;
					this.SendPropertyChanged("AgentId");
					this.OnAgentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="NVarChar(3)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.RightsStatement")]
	public partial class RightsStatement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RightsStatementId;
		
		private string _AccessRights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRightsStatementIdChanging(System.Guid value);
    partial void OnRightsStatementIdChanged();
    partial void OnAccessRightsChanging(string value);
    partial void OnAccessRightsChanged();
    #endregion
		
		public RightsStatement()
		{
			OnCreated();
		}
		
		[Column(Storage="_RightsStatementId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RightsStatementId
		{
			get
			{
				return this._RightsStatementId;
			}
			set
			{
				if ((this._RightsStatementId != value))
				{
					this.OnRightsStatementIdChanging(value);
					this.SendPropertyChanging();
					this._RightsStatementId = value;
					this.SendPropertyChanged("RightsStatementId");
					this.OnRightsStatementIdChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRights", DbType="NVarChar(30)")]
		public string AccessRights
		{
			get
			{
				return this._AccessRights;
			}
			set
			{
				if ((this._AccessRights != value))
				{
					this.OnAccessRightsChanging(value);
					this.SendPropertyChanging();
					this._AccessRights = value;
					this.SendPropertyChanged("AccessRights");
					this.OnAccessRightsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="DublinCore.SizeOrDuration")]
	public partial class SizeOrDuration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SizeOrDurationId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSizeOrDurationIdChanging(System.Guid value);
    partial void OnSizeOrDurationIdChanged();
    #endregion
		
		public SizeOrDuration()
		{
			OnCreated();
		}
		
		[Column(Storage="_SizeOrDurationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SizeOrDurationId
		{
			get
			{
				return this._SizeOrDurationId;
			}
			set
			{
				if ((this._SizeOrDurationId != value))
				{
					this.OnSizeOrDurationIdChanging(value);
					this.SendPropertyChanging();
					this._SizeOrDurationId = value;
					this.SendPropertyChanged("SizeOrDurationId");
					this.OnSizeOrDurationIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
